plugins {
    id 'com.github.johnrengelman.shadow'
}

dependencies {
    implementation project(':common-util')
    implementation project(':common-verifier')
    implementation project(':serverconf')
    implementation project(':signer-protocol')
    implementation project(':common-messagelog')
    implementation project(':common-op-monitoring')

    implementation "org.eclipse.jetty:jetty-xml:$jettyVersion"
    implementation 'xerces:xercesImpl:2.12.0'

    testImplementation project(':common-test')
    testImplementation project(path: ':common-util', configuration: 'testArtifacts')

    testImplementation 'org.hsqldb:hsqldb:2.5.1'
    testImplementation "com.typesafe.akka:akka-testkit_$akkaVersion"
    testImplementation 'io.rest-assured:rest-assured:4.3.1'
    testImplementation 'wsdl4j:wsdl4j:1.6.3'
}

jar {
  manifest {
    attributes('Main-Class':'ee.ria.xroad.proxy.ProxyMain')
  }
  enabled = false
}

shadowJar {
    archiveClassifier = ''
    append('reference.conf')
    exclude('**/module-info.class')
    from rootProject.file("LICENSE.txt")
}

testJar.enabled = true
build.finalizedBy shadowJar

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

task runProxyMain(type: JavaExec) {
    jvmArgs '-Dxroad.proxy.sslEnabled=false',
        '-Dxroad.proxy.globalConfDistributor.enabled=false',
        '-Dxroad.proxy.ocspCachePath=build/ocsp-cache',
        '-Dxroad.tempFiles.path=build/attach-tmp',
        '-Dxroad.proxy.globalConfFile=../systemtest/conf/local_test/globalconf.xml',
        '-Dxroad.proxy.configurationFile=../systemtest/conf/local_test/serverconf_consumer.xml',
        '-Dxroad.key.configurationFile=../systemtest/conf/local_test/keyconf.xml',
        '-Dxroad.appLog.path=log',
        '-Dlogback.configurationFile=src/test/resources/logback-test.xml'

    //main = 'ee.ria.xroad.proxy.ProxyMain'
    main = 'ee.ria.xroad.proxy.TestProxyMain'
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath
    classpath += files('src/test/resources')
}

apply plugin: "jacoco"

test {
    useJUnit {
        excludeCategories 'ee.ria.xroad.proxy.testutil.IntegrationTest'
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/unitTest.exec")
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    shouldRunAfter test

    useJUnit {
        includeCategories 'ee.ria.xroad.proxy.testutil.IntegrationTest'
    }
}

task runProxyTest(type: JavaExec) {
    group = "verification"
    shouldRunAfter integrationTest

    jvmArgs '-Xmx2g',
        '-Dxroad.proxy.ocspCachePath=build/ocsp-cache',
        '-Dxroad.tempFiles.path=build/attach-tmp',
        '-Dxroad.proxy.jetty-serverproxy-configuration-file=src/test/serverproxy.xml',
        '-Dxroad.proxy.jetty-ocsp-responder-configuration-file=src/test/ocsp-responder.xml',
        '-Dxroad.proxy.jetty-clientproxy-configuration-file=src/test/clientproxy.xml',
        '-Dxroad.proxy.client-connector-so-linger=-1',
        '-Dxroad.proxy.client-httpclient-so-linger=-1',
        '-Dxroad.proxy.server-connector-so-linger=-1',
        '-Dlogback.configurationFile=src/test/logback-proxytest.xml',
        '-Dproxy.akka.loglevel=DEBUG'
        '-Dproxy.akka.remote.artery.canonical.port=0'
//      '-Djava.security.properties==src/main/resources/java.security'

    main = 'ee.ria.xroad.proxy.testsuite.ProxyTestSuite'
    classpath = sourceSets.test.runtimeClasspath
}

jacoco {
    applyTo runProxyTest
}

task mergedJacoco(dependsOn: 'runProxyTest', type: JacocoMerge) {
    // merge jacoco results from normal tests and runProxyTest
    destinationFile = file("$buildDir/jacoco/test.exec")
    executionData test, integrationTest, runProxyTest
}

task runBatchSigner(type: JavaExec) {
    jvmArgs '-Dlogback.configurationFile=src/test/logback-batchsigner.xml'

    main = 'ee.ria.xroad.common.signature.BatchSigner'
    classpath = sourceSets.test.runtimeClasspath
}

runProxyTest.finalizedBy mergedJacoco
check.dependsOn integrationTest
