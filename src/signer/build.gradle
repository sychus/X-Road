plugins {
    id 'com.github.johnrengelman.shadow'
}
project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }
}

dependencies {
    implementation project(':common-util')
    implementation project(':common-verifier')
    implementation project(':signer-protocol')

    // Necessary since there are jars with no adequate Maven dependencies
    implementation fileTree(dir: '../libs', include: '*.jar')

    testImplementation project(':common-test')
    testImplementation project(path: ':common-verifier', configuration: 'testArtifacts')

    testImplementation "com.typesafe.akka:akka-testkit_$akkaVersion"
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    testImplementation 'org.mockito:mockito-core:3.4.6'

    xjc "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
    xjc "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
}

jar {
  manifest {
    attributes 'Main-Class': 'ee.ria.xroad.signer.SignerMain'
  }
  enabled = false
}

shadowJar {
    archiveClassifier = ''
    exclude('**/module-info.class')
    append('reference.conf')
    from rootProject.file("LICENSE.txt")
}

build.finalizedBy shadowJar

task createDirs () {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

task xjc () {
    inputs.files files('src/main/resources/*.xsd')
    outputs.dir project.ext.schemaTargetDir

    doLast {
        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)

        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.conf.keyconf',
            schema: 'src/main/resources/keyconf.xsd',
            binding: '../common-util/src/main/resources/identifiers-bindings.xml'
        )
    }
}

// XXX For running several instances side-by-side, do not use the gradle task --
// gradle cannot handle parallel runs if each task invokes a long-running server process.
// Instead, use the .jar in the build/libs directory:
// java -Djava.library.path=/home/iks2/core/passwordstore -jar signer-1.0.jar
task runSignerMain(type: JavaExec) {
    jvmArgs '-Dxroad.signer.key-configuration-file=src/test/resources/keyconf.xml',
        '-Dxroad.signer.device-configuration-file=src/test/resources/devices.ini',
        '-Dxroad.common.configuration-path=../common-util/src/test/resources/globalconf_good_v2',
        '-Dxroad.common.temp-files-path=build/tmp/',
        '-Dxroad.proxy.configuration-anchor-file=../common-util/src/test/resources/configuration-anchor1.xml',
        '-Dlogback.configurationFile=src/test/resources/logback-signer.xml',
        '-Djava.library.path=../passwordstore:../libs',
        '-Dxroad.signer.moduleManagerImpl=ee.ria.xroad.signer.tokenmanager.module.HardwareModuleManagerImpl'
    main = 'ee.ria.xroad.signer.SignerMain'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files('../addons/hwtoken/build/libs/hwtoken-1.0.jar')

    description = "Starts signer main program.\nNote: " +
       "Be sure that appropriate libpkcs11wrapper.so is installed to the " +
       "directory\n{JAVA_HOME}/jre/lib/i386 (analogous directory for 64-bit " +
       "OS). Otherwise use\nnext property to detemine your library path:\n" +
       "jvmArgs '-Djava.library.path=/foo/bar/iaik/bin/unix/linux-x86/release'";
}

xjc.dependsOn createDirs
compileJava.dependsOn xjc

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava
